from neo4j import GraphDatabase

NEO4J_URI = "neo4j+s://d8bae317.databases.neo4j.io"
NEO4J_USERNAME = "neo4j"
NEO4J_PASSWORD = "vL7F5UZ4hr7sOs6qyYq8G33mZyVzmx7IPqshk5YNc_Q"

driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USERNAME, NEO4J_PASSWORD))

ROUTES = {
    "17": [
        ("ул. Хейкконена", "ТЦ 'Столица'", 1),
        ("ТЦ 'Столица'", "Детская Республиканская больница", 10),
        ("Детская Республиканская больница", "Сигма", 5),
        ("Сигма", "ул. Ватутина", 4),
        ("ул. Ватутина", "ЖД вокзал", 3),
        ("ЖД вокзал", "пл. Гагарина", 2),
        ("пл. Гагарина", "Детская художественная школа", 6),
        ("Детская художественная школа", "пр. Александра Невского", 4),
        ("пр. Александра Невского", "СК 'Курган'", 7),
        ("СК 'Курган'", "ул. Ровио", 3),
        ("ул. Ровио", "ул. Лыжная", 2)
    ],
    "22": [
        ("ул. Хейкконена", "ТЦ 'Столица'", 1),
        ("ТЦ 'Столица'", "Детская Республиканская больница", 10),
        ("Детская Республиканская больница", "Сигма", 5),
        ("Сигма", "ул. Ватутина", 4),
        ("ул. Ватутина", "ЖД вокзал", 3),
        ("ЖД вокзал", "пл. Гагарина", 2),
        ("пл. Гагарина", "Гос. университет", 3),
        ("Гос. университет", "гост. Северная", 1),
        ("гост. Северная", "ул. Куйбышева", 2),
        ("ул. Куйбышева", "пр. Кирова", 3),
        ("пр. Кирова", "ул. Правды", 4),
        ("ул. Правды", "ул. Пробная", 6),
        ("ул. Пробная", "Металлосклад", 7),
        ("Металлосклад", "Завод 'Славмо'", 10)
    ],
    "1": [
        ("ул. Антонова", "ул. Сегежская", 2),
        ("ул. Сегежская", "Ключевское шоссе", 3),
        ("Ключевское шоссе", "ул. Лыжная", 5),
        ("ул. Лыжная", "ул. Ровио", 2),
        ("ул. Ровио", "СК 'Курган'", 3)
    ],
    "8": [
        ("наб. Варкауса", "ул. Ленинградская", 1),
        ("ул. Ленинградская", "ул. Куйбышева", 2),
        ("ул. Куйбышева", "гост. Северная", 1),
        ("гост. Северная", "Гос. университет", 1),
        ("Гос. университет", "пл. Гагарина", 3),
        ("пл. Гагарина", "Детская художественная школа", 2),
        ("Детская художественная школа", "пр. Александра Невского", 3),
        ("пр. Александра Невского", "ул. Маршала Мерецкова", 4),
        ("ул. Маршала Мерецкова", "ул. Калинина", 5),
        ("ул. Калинина", "ул. Правды", 6),
        ("ул. Правды", "ул. Пробная", 4),
        ("ул. Пробная", "Металлосклад", 7),
    ]
}

ORGANIZATIONS = {
    "ул. Хейкконена": [
        ("Магазин 'Светофор'", "Магазин"),
        ("Аптека 'Здоровье'", "Аптека"),
        ("Пекарня 'Хлебный Дом'", "Пекарня")
    ],
    "ТЦ 'Столица'": [
        ("Школа №46", "Учебное заведение"),
        ("Ресторан 'Теремок'", "Ресторан"),
        ("Фитнес-клуб 'Энергия'", "Спортивное заведение")
    ],
    "Сигма": [
        ("ТЦ 'Лотос Плаза'", "Торговый центр"),
        ("Магазин 'Технопарк'", "Магазин"),
        ("Салон связи 'Мегафон'", "Сервис")
    ],
    "Гос. университет": [
        ("ПетрГУ", "Учебное заведение"),
        ("Библиотека им. Карелина", "Библиотека"),
        ("Кафе 'Перемена'", "Кафе")
    ],
    "ЖД вокзал": [
        ("Железнодорожный вокзал", "Транспорт"),
        ("Отель 'Вояж'", "Отель"),
        ("Супермаркет 'Пятёрочка'", "Магазин")
    ],
    "СК 'Курган'": [
        ("Спортивный комплекс", "Спортивное заведение"),
        ("Магазин 'Спортмастер'", "Магазин"),
        ("Ресторан 'Гриль Хаус'", "Ресторан")
    ],
    "ул. Калинина": [
        ("Аптека 'Фарма'", "Аптека"),
        ("Магазин 'Овощи-Фрукты'", "Магазин"),
        ("Автосервис 'РемАвто'", "Автосервис")
    ],
    "ул. Правды": [
        ("Продуктовый магазин 'Каравай'", "Магазин"),
        ("Парикмахерская 'Локон'", "Салон красоты"),
        ("Магазин 'Электроника'", "Магазин")
    ],
    "ул. Пробная": [
        ("Магазин 'Мир мебели'", "Магазин"),
        ("Склад 'Стройматериалы'", "Склад"),
        ("Кафе 'Уютное место'", "Кафе")
    ]
}

def create_graph(tx):
    tx.run("MATCH (n) DETACH DELETE n")

    for route, stops in ROUTES.items():
        for i, (stop1, stop2, distance) in enumerate(stops):
            tx.run("""
                MERGE (s1:Stop {name: $stop1})
                MERGE (s2:Stop {name: $stop2})
                MERGE (r:Route {number: $route})
                MERGE (s1)-[:PART_OF]->(r)
                MERGE (s2)-[:PART_OF]->(r)
                MERGE (s1)-[:$route {distance: $distance}]->(s2)
            """, stop1=stop1, stop2=stop2, route=route, distance=distance)

    for stop, orgs in ORGANIZATIONS.items():
        for org, category in orgs:
            tx.run("""
                MERGE (s:Stop {name: $stop})
                MERGE (o:Organization {name: $org})
                SET o.category = $category
                MERGE (o)-[:LOCATED_NEAR]->(s)
            """, stop=stop, org=org, category=category)

with driver.session() as session:
    session.execute_write(create_graph)

print("База данных успешно создана!")
driver.close()

